enclave {
    include "sgx_key_exchange.h"
    include "sgx_trts.h"
	include "types.h"
    
    from "sgx_tkey_exchange.edl" import *;
    from "sgx_tstdc.edl" import *;

    trusted {
        public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse,[out] sgx_ra_context_t *ctx,[out] sgx_status_t *pse_status);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t ecall_setSessionKey([in]sgx_ra_context_t *ctx, sgx_ra_key_type_t type);                                  
        public sgx_status_t enclave_sealed_init([in,size=576] uint8_t* sealed_buf);
	    public sgx_status_t enclave_sealed_close([out,size=576] uint8_t* sealed_buf);
        public sgx_status_t ecall_calcmac([user_check] uint8_t *src, uint32_t srcLen, [user_check] uint8_t *cmac, [user_check]uint8_t* chunkHashList);
        public sgx_status_t ecall_getCurrentSessionKey([user_check] char* currentSessionKeyResult);
        public sgx_status_t ecall_setCurrentSessionKey([user_check]uint8_t* currentSessionKey, [user_check]uint8_t* hmacKey);
        public sgx_status_t ecall_keyExchangeEncrypt([user_check]uint8_t* chunkHash, uint32_t srcLen, uint32_t number, [user_check]uint8_t* cmac, [user_check]uint8_t* chunkHashList);
        public sgx_status_t ecall_sendEncrypt(uint32_t batchNumber, uint32_t totalNumber, [user_check]uint8_t* cipherKey, [user_check]uint8_t* plainkey, [user_check] uint8_t* serverHmac, [user_check]uint8_t* upload, [user_check]uint8_t* cipherblock, [user_check]uint8_t* sigList);
    }; 
    untrusted {
		void print([in,size=len]const char* mem, uint32_t len, uint32_t type);
    };
};